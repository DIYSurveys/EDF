#set($entity = $Neo.Entity)
#set($dataSourceName = $Neo.Model.Name)
#set($db = $entity.Database)
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="model.cs" company="OnePoint Global">
//   Copyright (c) 2012 OnePoint Global Ltd. All rights reserved.
// </copyright>
// <summary>
//   This file was autogenerated and you should not edit it. It will be 
//   regenerated whenever the schema changes.
//   All changes should be made in ${Neo.Entity.ClassName}.cs and the mode.xml. 
// </summary>
// --------------------------------------------------------------------------------------------------------------------

#if($Neo.Entity.Namespace)
namespace $Neo.Entity.Namespace 
{ 

#end
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Xml.Serialization;
using OnePoint.Data;
using OnePoint.Logging;
#foreach($ns in $entity.UsedNamespaces)
#if($ns != $entity.Namespace)
using $ns;
#end
#end

    

#if($entity.Description)
/// <summary>
/// $entity.Description Base Class
/// </summary>
#end
#if(${entity.BaseClassName})
[DataContract]
public class ${entity.ClassName}Base : ${entity.BaseClassName}, I${entity.ClassName}Data 
{
#else
[DataContract]
public class ${entity.ClassName}Base : DataObject, I${entity.ClassName}Data
{
#end
#foreach($attribute in $entity.Attributes)
#if(!$attribute.IsHidden)
private $attribute.DotNetType _$attribute.DotNetName;
#if($attribute.AllowsNull && $attribute.DotNetType != "System.String")
private bool _is${attribute.DotNetName}Specified = false;
#end
#end
#end
#foreach($rel in $entity.ToOneRelationships)
protected ${rel.ForeignEntity.ClassName} rel$rel.DotNetName = null;
#end
#foreach($rel in $entity.ToManyRelationships)
protected List<${rel.ForeignEntity.ClassName}> rel${rel.DotNetName} = null;
#end
       
public ${entity.ClassName}Base() : base() 
{
}
#if($entity.IdMethod.ToString != "Native")

public ${entity.ClassName}Base(#foreach($column in $entity.PkColumns)#if($velocityCount > 1), #end${column.DotNetType} key${column.DotNetName}#end) : this() 
{Ar
#foreach($column in $entity.PkColumns)
_${column.DotNetName} = key${column.DotNetName};
#end
}
#end

public void Dispose()
{
}

#foreach($attribute in $entity.Attributes)
#if(!$attribute.IsHidden)
#if($attribute.Description)
/// <summary>
/// Gets or sets the $attribute.Description
/// </summary>
#end
[DataMember]
public virtual $attribute.DotNetType $attribute.DotNetName 
{
get 
{ 
return this._$attribute.DotNetName; 
}
            
set 
{ 
this._$attribute.DotNetName = value;
base.IsModified = true;
#if($attribute.AllowsNull && $attribute.DotNetType != "System.String") ${attribute.DotNetName}Specified = #if($attribute.DotNetType != "System.String")true#else(value != null)#end;#end
}
}


#if($attribute.AllowsNull && $attribute.DotNetType != "System.String")
///<summary>Determines whether $attribute.DotNetName currently is set to NULL. Used in XML Serialisation.</summary>
[DataMember]
public virtual bool ${attribute.DotNetName}Specified 
{
get 
{
return this._is${attribute.DotNetName}Specified; 
}

set {
this._is${attribute.DotNetName}Specified = value; 
base.IsModified = true; 
}
}
                
#end    
#end
#end
#foreach($rel in $entity.ToOneRelationships)
#foreach($attr in $rel.LocalEntity.Attributes)#if($attr.ColumnName == $rel.LocalKey)#set($fkLocal = $attr)#end#end
#foreach($attr in $rel.ForeignEntity.Attributes)#if($attr.ColumnName == $rel.ForeignKey)#set($fkForeign = $attr)#end#end
public virtual ${rel.ForeignEntity.ClassName} ${rel.DotNetName} 
{
get 
{
if(rel${rel.DotNetName} == null) 
{
${rel.ForeignEntity.ClassName}Factory factory = new ${rel.ForeignEntity.ClassName}Factory();
rel${rel.DotNetName} = factory.FindObject(${fkLocal.DotNetName});
}
return rel${rel.DotNetName};
}

set 
{
rel${rel.DotNetName} = value;
#if($rel.LocalEntity.AllowsNull)
if (value != null) 
{
${fkLocal.DotNetName} = value.${fkForeign.DotNetName};
Is${fkLocal.DotNetName}Specified = true;
} 
else 
{
Is${fkLocal.DotNetName}Specified = false;
}					
#else
${fkLocal.DotNetName} = value.${fkForeign.DotNetName};
#end
}
}

#end
#foreach($rel in $entity.ToManyRelationships)
#foreach($attr in $rel.LocalEntity.Attributes)#if($attr.ColumnName == $rel.LocalKey)#set($fkLocal = $attr)#end#end
#foreach($attr in $rel.ForeignEntity.Attributes)#if($attr.ColumnName == $rel.ForeignKey)#set($fkForeign = $attr)#end#end
public virtual List<${rel.ForeignEntity.ClassName}> ${rel.DotNetName} 
{
get 
{
if(rel${rel.DotNetName} == null) 
{
${rel.ForeignEntity.ClassName}Factory factory = new ${rel.ForeignEntity.ClassName}Factory();
rel${rel.DotNetName} = factory.FindBy${fkForeign.DotNetName}(${fkLocal.DotNetName});
}

return rel${rel.DotNetName};
}
}
    
#end

public override object[] PrimaryKey {
get {
return new object[] {#foreach($column in $entity.PkColumns)#if( $velocityCount > 1), #end${column.DotNetName}#end};
}
set {
#if($entity.PkColumns.Count == 1 && $entity.IdMethod.ToString == "Native")
#foreach($column in $entity.PkColumns)
#if(${column.DotNetType} == "System.Decimal")
${column.DotNetName} = (System.Decimal)value[0];
#else
//bodge because ADO.NET returns System.Decimal
if (value[0] is ${column.DotNetType}) {
${column.DotNetName} = (${column.DotNetType}) value[0];
} else {
#if(${column.DotNetType} == "System.Int16")#set($convert = "Int16")#elseif(${column.DotNetType} == "System.String")#set($convert = "String")#elseif(${column.DotNetType} == "System.Int32")#set($convert = "Int32")#elseif(${column.DotNetType} == "System.Int64")#set($convert = "Int64")#elseif(${column.DotNetType} == "System.Single")#set($convert = "Float")#elseif(${column.DotNetType} == "System.Double")#set($convert = "Double")#end
${column.DotNetName} = Decimal.To${convert}((System.Decimal) value[0]);
}
#end
#end
#else
#set($index = 0)#foreach($column in $entity.PkColumns)
${column.DotNetName} = (${column.DotNetType}) value[$index];
#set($index = $index + 1)#end
#end
}
}
}
    
#if($Neo.Entity.Namespace)
}
#end