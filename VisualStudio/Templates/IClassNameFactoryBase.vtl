#set($entity = $Neo.Entity)
#set($dataSourceName = $Neo.Model.Name)
#set($db = $entity.Database)
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="model.cs" company="OnePoint Global">
//   Copyright (c) 2012 OnePoint Global Ltd. All rights reserved.
// </copyright>
// <summary>
//   This file was autogenerated and you should not edit it. It will be 
//   regenerated whenever the schema changes.
//   All changes should be made in ${Neo.Entity.ClassName}.cs and the mode.xml. 
// </summary>
// --------------------------------------------------------------------------------------------------------------------


#if($Neo.Entity.Namespace)
namespace $Neo.Entity.Namespace 
{
#end
using System;
using System.Collections.Generic;
    
using OnePoint.Data;
using OnePoint.Logging;
#foreach($ns in $entity.UsedNamespaces)
#if($ns != $entity.Namespace)
using $ns;
#end
#end


/// <summary>
/// The I${entity.ClassName}FactoryBase Interface Factory Base
/// </summary>
public interface I${entity.ClassName}FactoryBase
{
string SelectAllStatement { get; }
#foreach($attribute in $entity.Attributes)
#if($attribute.DotNetType == "System.String")#set($size = $attribute.Size)#elseif($attribute.DotNetType == "System.Int16")#set($size = 2)#elseif($attribute.DotNetType == "System.Int32")#set($size = 4)#elseif($attribute.DotNetType == "System.Single")#set($size = 8)#elseif($attribute.DotNetType == "System.Int64")#set($size = 8)#elseif($attribute.DotNetType == "System.DateTime")#set($size = 8)#elseif($attribute.DotNetType == "System.Boolean")#set($size = 1)#else#set($size = 9999)#end
#if($attribute.ColumnType == "VARCHAR")#set($type = "VarChar")#elseif($attribute.ColumnType == "CHAR")#set($type = "Char")#elseif($attribute.ColumnType == "LONGVARCHAR")#set($type = "NVarChar")#elseif($attribute.ColumnType == "TEXT")#set($type = "NText")#elseif($attribute.ColumnType == "INTEGER")#set($type = "Int")#elseif($attribute.ColumnType == "SMALLINT")#set($type = "SmallInt")#elseif($attribute.ColumnType == "TINYINT")#set($type = "TinyInt")#elseif($attribute.ColumnType == "BIGINT")#set($type = "BigInt")#elseif($attribute.ColumnType == "BIT")#set($type = "Bit")#elseif($attribute.ColumnType == "VARBINARY")#set($type = "VarBinary")#elseif($attribute.ColumnType == "DATE")#set($type = "DateTime")#elseif($attribute.ColumnType == "FLOAT")#set($type = "Float")#elseif($attribute.ColumnType == "DECIMAL")#set($type = "Decimal")#elseif($attribute.ColumnType == "REAL")#set($type = "Real")#elseif($attribute.ColumnType == "BINARY")#set($type = "Binary")#elseif($attribute.ColumnType == "UNIQUEIDENTIFIER")#set($type = "UniqueIdentifier")#else#set($type = $attribute.ColumnType)#end
#if(!$attribute.IsHidden)
void Add${attribute.DotNetName}Parameter(DataHandler dataHandler, $attribute.DotNetType val${attribute.DotNetName});       
#end
#if($attribute.AllowsNull && $attribute.DotNetType != "System.String")
void Add${attribute.DotNetName}NullParameter(DataHandler dataHandler);
#end
#end
#foreach($attribute in $entity.Attributes)
#if(!$attribute.IsHidden)
List<${entity.ClassName}> FindBy${attribute.DotNetName}(${attribute.GenericType} fieldValue);
#end
#end
${entity.ClassName} Create${entity.ClassName}(IDataReader reader);
}


#if($Neo.Entity.Namespace)
}
#end

