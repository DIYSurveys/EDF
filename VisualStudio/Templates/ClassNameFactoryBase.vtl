#set($entity = $Neo.Entity)
#set($dataSourceName = $Neo.Model.Name)
#set($db = $entity.Database)
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="model.cs" company="OnePoint Global">
//   Copyright (c) 2020 OnePoint Global Ltd. All rights reserved.
// </copyright>
// <summary>
//   This file was autogenerated and you should not edit it. It will be 
//   regenerated whenever the schema changes.
//   All changes should be made in ${Neo.Entity.ClassName}.cs and the mode.xml. 
// </summary>
// --------------------------------------------------------------------------------------------------------------------

#if(${Neo.Entity.Namespace})
namespace ${Neo.Entity.Namespace} 
{ 

#end
using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;

//using OnePoint.Common.Utils;
using OnePoint.Data;
using OnePoint.Logging;

#foreach($ns in $entity.UsedNamespaces)
#if($ns != $entity.Namespace)
using $ns;
#end
#end   

/// <summary>
/// Creates and finds ${entity.ClassName} objects
/// </summary>
public class ${entity.ClassName}FactoryBase : DataObjectFactory<${entity.ClassName}>, I${entity.ClassName}FactoryBase
{
#foreach($attribute in $entity.Attributes)
#if(!$attribute.IsHidden)
public const string FIELD_NAME_$attribute.DotNetName.ToUpper() = "[${attribute.ColumnName}]";
#end
#end
#foreach($attribute in $entity.Attributes)
#if(!$attribute.IsHidden)
public const string PARAMETER_NAME_$attribute.DotNetName.ToUpper() = "@$attribute.ColumnName.ToUpper()";
#end
#end

/// <summary>
/// Default constructor
/// </summary>
public ${entity.ClassName}FactoryBase() : base() 
{
#if($entity.IdMethod.ToString == "Native")
HasAutoIncrementPk = true;
#end
}
        
/// <summary>
/// Gets a value indicating the table Name.
/// </summary>
public override string TableName 
{
get
{
return "${db}.$entity.TableName";
}
}

/// <summary>
/// Gets a value indicating Microsoft SQL Statement to get everything from the table.
/// </summary>
public override string SelectAllStatement 
{
get
{
return "SELECT #foreach($attribute in $entity.Attributes)#if($velocityCount > 1), #end$attribute.ColumnName#end FROM " + "${db}.$entity.TableName";
}
}
        
/// <summary>
/// Gets a value indicating the primary key.
/// </summary>
protected override string ByPkClause 
{
get
{
return "#foreach($column in $entity.PkColumns)#if($velocityCount > 1) AND #end${column.ColumnName} = @${column.ColumnName.ToUpper()}#end";
}
}
        
/// <summary>
/// Gets a value indicating the Microsoft SQL statement to insert a data object.
/// </summary>
protected override string InsertStatement 
{
get
{
return "INSERT INTO " + "${db}.$entity.TableName (#set($colCount = 1)#foreach($attribute in $entity.Attributes)#if($entity.IdMethod.ToString != "Native" || !$attribute.IsPkColumn)#if($colCount > 1), #end${attribute.ColumnName}#set($colCount = $colCount + 1)#end#end) VALUES (#set($colCount = 1)#foreach($attribute in $entity.Attributes)#if($entity.IdMethod.ToString != "Native" || !$attribute.IsPkColumn)#if( $colCount > 1), #end@${attribute.ColumnName.ToUpper()}#set($colCount = $colCount + 1)#end#end)";
}
}
        
/// <summary>
/// Gets a value indicating the Microsoft SQL statement to update a data object.
/// </summary>
protected override string UpdateStatement 
{
get
{
return "UPDATE " + "${db}.$entity.TableName SET #set($colCount = 1)#foreach($attribute in $entity.Attributes)#if($entity.IdMethod.ToString != "Native" || !$attribute.IsPkColumn)#if( $colCount > 1), #end${attribute.ColumnName} = @${attribute.ColumnName.ToUpper()}#set($colCount = $colCount + 1)#end#end WHERE " + this.ByPkClause;
}
}
        
/// <summary>
/// Gets a value indicating the Microsoft SQL statement to delete a data object.
/// </summary>
protected override string DeleteStatement 
{
get
{
return "DELETE FROM " + "${db}.$entity.TableName WHERE " + this.ByPkClause;
}
}

/// <summary>
/// The Microsoft SQL statement to join one table to another and perform it.
/// </summary>
#if ($entity.PkColumns.Count == $entity.Attributes.Count)
public bool InsertJoinTableEntry(#foreach($column in $entity.PkColumns)#if($velocityCount > 1), #end${column.DotNetType} key${column.DotNetName}#end)
{
string sql = "IF NOT EXISTS (" + SelectAllStatement + " WHERE " + ByPkClause + ") " + InsertStatement;
return ProcessPkStatement(#foreach($column in $entity.PkColumns)#if($velocityCount > 1), #end key${column.DotNetName}#end, sql);
}
        
#end
public bool DeleteByPk(#foreach($column in $entity.PkColumns)#if($velocityCount > 1), #end${column.GenericType} key${column.DotNetName}#end)
{
return ProcessPkStatement(#foreach($column in $entity.PkColumns)#if($velocityCount > 1),#end key${column.DotNetName}#end #if($entity.PkColumns.Count > 0),#end DeleteStatement);
}
        
// Define input parameters once only so they can be reused by other methods
#foreach($attribute in $entity.Attributes)
#if($attribute.DotNetType == "System.String")#set($size = $attribute.Size)#elseif($attribute.DotNetType == "System.Int16")#set($size = 2)#elseif($attribute.DotNetType == "System.Int32")#set($size = 4)#elseif($attribute.DotNetType == "System.Single")#set($size = 8)#elseif($attribute.DotNetType == "System.Int64")#set($size = 8)#elseif($attribute.DotNetType == "System.DateTime")#set($size = 8)#elseif($attribute.DotNetType == "System.Boolean")#set($size = 1)#else#set($size = 9999)#end
#if($attribute.ColumnType == "VARCHAR")#set($type = "VarChar")#elseif($attribute.ColumnType == "CHAR")#set($type = "Char")#elseif($attribute.ColumnType == "LONGVARCHAR")#set($type = "NVarChar")#elseif($attribute.ColumnType == "TEXT")#set($type = "NText")#elseif($attribute.ColumnType == "INTEGER")#set($type = "Int")#elseif($attribute.ColumnType == "SMALLINT")#set($type = "SmallInt")#elseif($attribute.ColumnType == "TINYINT")#set($type = "TinyInt")#elseif($attribute.ColumnType == "BIGINT")#set($type = "BigInt")#elseif($attribute.ColumnType == "BIT")#set($type = "Bit")#elseif($attribute.ColumnType == "VARBINARY")#set($type = "VarBinary")#elseif($attribute.ColumnType == "DATE")#set($type = "DateTime")#elseif($attribute.ColumnType == "FLOAT")#set($type = "Float")#elseif($attribute.ColumnType == "DECIMAL")#set($type = "Decimal")#elseif($attribute.ColumnType == "REAL")#set($type = "Real")#elseif($attribute.ColumnType == "BINARY")#set($type = "Binary")#elseif($attribute.ColumnType == "UNIQUEIDENTIFIER")#set($type = "UniqueIdentifier")#else#set($type = $attribute.ColumnType)#end
#if(!$attribute.IsHidden)
public void Add${attribute.DotNetName}Parameter(DataHandler dataHandler, $attribute.DotNetType val${attribute.DotNetName})
{
dataHandler.AddInParameter("@${attribute.ColumnName.ToUpper()}", QueryDbType.$type, #if($type == "NText" || $type == "VarBinary")(val${attribute.DotNetName} != null) ? val${attribute.DotNetName}.Length : 0#else$size#end, "${attribute.ColumnName}",#if($attribute.AllowsNull && $attribute.DotNetType == "System.String") val${attribute.DotNetName} #else val${attribute.DotNetName}#end);
}

#if($attribute.AllowsNull && $attribute.DotNetType != "System.String")
public void Add${attribute.DotNetName}NullParameter(DataHandler dataHandler) 
{
dataHandler.AddInParameter("@${attribute.ColumnName.ToUpper()}", QueryDbType.$type, $size, "${attribute.ColumnName}",DBNull.Value);
}

#end
#end
#end
private bool ProcessPkStatement(#foreach($column in $entity.PkColumns)#if($velocityCount > 1), #end${column.GenericType} key${column.DotNetName}#end#if($entity.PkColumns.Count > 0),#end string query) 
{
using (DataHandler dataHandler = new DataHandler())
{
dataHandler.CommandText = query;
bool isOk = false;
try 
{
#foreach($attribute in $entity.PkColumns)
    this.Add${attribute.DotNetName}Parameter(dataHandler, key${attribute.DotNetName});
#end
    dataHandler.ExecuteNonQuery();
    isOk = true;
                
} 
catch (Exception e) 
{
    LogManager.GetLogger(GetType()).Error(e);
}

return isOk;
}
}

public override List<${entity.ClassName}> Find(string attributeName, object attributeValue)
{
using (DataHandler dataHandler = new DataHandler())
{
switch(attributeName)
{
#foreach($attribute in $entity.Attributes)
#if(!$attribute.IsHidden)
    case "${attribute.DotNetName}":
        dataHandler.CommandText = SelectAllStatement + " WHERE ${attribute.ColumnName} = @${attribute.ColumnName.ToUpper()}";
#if($attribute.AllowsNull && $attribute.DotNetType != "System.String")
        if (attributeValue != null) 
        {
            Add${attribute.DotNetName}Parameter(dataHandler, (${attribute.GenericType})attributeValue);
        } 
        else 
        {
            Add${attribute.DotNetName}NullParameter(dataHandler);
        }
#else
        Add${attribute.DotNetName}Parameter(dataHandler, (${attribute.GenericType})attributeValue);
#end
    break;
#end
#end			
    default:
        throw new ArgumentException("Cannot find column name for attribute " + attributeName);
}

return Find(dataHandler);
}
}

#foreach($attribute in $entity.Attributes)
#if(!$attribute.IsHidden)
public List<${entity.ClassName}> FindBy${attribute.DotNetName}(${attribute.GenericType} fieldValue)
{
using (DataHandler dataHandler = new DataHandler())
{
dataHandler.CommandText = SelectAllStatement + " WHERE ${attribute.ColumnName} = @${attribute.ColumnName.ToUpper()}";
Add${attribute.DotNetName}Parameter(dataHandler, fieldValue);
return Find(dataHandler);
}
}
#end

#end
protected override void AppendSqlParameters(DataHandler dataHandler, DataObject dataObject, DataMode mode) 
{
${Neo.Entity.Namespace}.${entity.ClassName} entity = (${Neo.Entity.Namespace}.$entity.ClassName) dataObject;
if (mode == DataMode.Insert || mode == DataMode.Update) 
{
#foreach($attribute in $entity.Attributes)
#if(!$attribute.IsHidden)
#if($entity.IdMethod.ToString == "Native" && $attribute.IsPkColumn)
// Cannot use autoincrement field in insert
if (mode != DataMode.Insert) 
{
    Add${attribute.DotNetName}Parameter(dataHandler, entity.${attribute.DotNetName});
}
                
#else
#if($attribute.AllowsNull && $attribute.DotNetType != "System.String")
if (entity.${attribute.DotNetName}Specified) 
{
    Add${attribute.DotNetName}Parameter(dataHandler, entity.${attribute.DotNetName});
}
else 
{
    Add${attribute.DotNetName}NullParameter(dataHandler);
}
#else
Add${attribute.DotNetName}Parameter(dataHandler, entity.${attribute.DotNetName});
#end
#end
#end
#end
} 
else 
{

// Delete only requires primary keys
#foreach($column in $entity.PkColumns)
Add${column.DotNetName}Parameter(dataHandler, entity.${column.DotNetName});
#end
}
}
                
public virtual ${entity.ClassName} FindObject(#foreach($column in $entity.PkColumns)#if($velocityCount > 1), #end${column.GenericType} key${column.DotNetName}#end) 
{
using (DataHandler dataHandler = new DataHandler()) 
{
dataHandler.CommandText = SelectAllStatement + " WHERE " + ByPkClause;
#foreach($column in $entity.PkColumns)
Add${column.DotNetName}Parameter(dataHandler, key${column.DotNetName});
#end
List<${entity.ClassName}> list = Find(dataHandler);
if (list.Count == 1) 
{
    return list[0];
} 
else 
{
    return null;
}
}
}

public List<${entity.ClassName}> Find(DataHandler dataHandler)
{
try
{
dataHandler.ExecuteAsDataReader();
return this.Build(dataHandler, false);
}
catch (Exception e)
{
throw new Exception("Error in Find()", e);
}
finally
{
dataHandler.CloseConnection();
}
}

public async Task<IEnumerable<${entity.ClassName}>> FindAsync(DataHandler dataHandler)
{
    try
    {
        await dataHandler.ExecuteAsDataReaderAsync();
        return this.BuildAsync(dataHandler);
    }
    catch (Exception e)
    {
        throw new Exception("Error in FindAsync() for ${entity.ClassName}", e);
    }
    finally
    {
        dataHandler.CloseConnection();
    }
}

public IEnumerable<${entity.ClassName}> BuildAsync(DataHandler dataHandler)
{
    while (dataHandler.DataReader.ReadAsync().Result)
    { 
        yield return this.CreateObjectFromDataReader(dataHandler.DataReader, false);
    }

    dataHandler.CloseConnection();
}
        
public List<${entity.ClassName}> FindAllObjects()
{
return this.FindAllObjects(string.Empty);
}

public List<${entity.ClassName}> FindAllObjects(string orderByField)
{
return this.FindAllObjects(orderByField, 0);
}

public List<${entity.ClassName}> FindAllObjects(string orderByField, int resultLimit)
{
try
{
	if (this.DataHandler == null)
{
	this.CreateDataHandler();
}
				
	this.DataHandler.QueryHelper.Statement = this.SelectAllStatement;
	this.DataHandler.QueryHelper.AddOrderByField(orderByField);
	this.DataHandler.CommandText = this.DataHandler.QueryHelper.AddLimitClause(resultLimit);
	return this.Find(this.DataHandler);
				
}
catch (Exception e)
{
throw new Exception("FindAllObjects Failed", e);
}
finally
{
if (this.DataHandler != null)
{
    this.DataHandler.Dispose();
    this.DataHandler = null;
}
}
}

public ${entity.ClassName} Create${entity.ClassName}(IDataReader reader) 
{
return CreateObjectFromDataReader(reader, false);
}

protected override ${entity.ClassName} CreateObjectFromDataReader(IDataReader reader, bool populateRelatedObject) 
{
    ${Neo.Entity.Namespace}.${entity.ClassName} entity = new ${Neo.Entity.Namespace}.${entity.ClassName}();
    #foreach($attribute in $entity.Attributes)
    #if($attribute.ColumnType == "VARCHAR")#set($type = "VarChar")#elseif($attribute.ColumnType == "CHAR")#set($type = "Char")#elseif($attribute.ColumnType == "LONGVARCHAR")#set($type = "NVarChar")#elseif($attribute.ColumnType == "TEXT")#set($type = "NText")#elseif($attribute.ColumnType == "INTEGER")#set($type = "Int")#elseif($attribute.ColumnType == "SMALLINT")#set($type = "SmallInt")#elseif($attribute.ColumnType == "TINYINT")#set($type = "TinyInt")#elseif($attribute.ColumnType == "BIGINT")#set($type = "BigInt")#elseif($attribute.ColumnType == "BIT")#set($type = "Bit")#elseif($attribute.ColumnType == "VARBINARY")#set($type = "VarBinary")#elseif($attribute.ColumnType == "DATE")#set($type = "DateTime")#elseif($attribute.ColumnType == "FLOAT")#set($type = "Decimal")#elseif($attribute.ColumnType == "DECIMAL")#set($type = "Decimal")#elseif($attribute.ColumnType == "REAL")#set($type = "Real")#elseif($attribute.ColumnType == "BINARY")#set($type = "Binary")#elseif($attribute.ColumnType == "UNIQUEIDENTIFIER")#set($type = "UniqueIdentifier")#else#set($type = $attribute.ColumnType)#end
    #if(!$attribute.IsHidden)
    #if($attribute.AllowsNull)
    #if($attribute.DotNetType != "System.String")
    entity.${attribute.DotNetName}Specified = (reader["$attribute.ColumnName"] != DBNull.Value);
    if (entity.${attribute.DotNetName}Specified) 
    {
        entity.$attribute.DotNetName = ($attribute.DotNetType) reader.Get("$attribute.ColumnName", QueryDbType.$type);
    }

    #else
    entity.$attribute.DotNetName = (reader.Get("$attribute.ColumnName", QueryDbType.$type) != DBNull.Value ? ((string) reader.Get("$attribute.ColumnName", QueryDbType.$type)) : null);
    #end
    #else
    entity.$attribute.DotNetName = ($attribute.DotNetType)reader.Get("$attribute.ColumnName", QueryDbType.$type);
    #end
    #end
    #end
    entity.IsNew = false;
    return entity;
}

private List<${entity.ClassName}> Build(DataHandler currentDataHandler, bool closeConnection)
{
    List<${entity.ClassName}> array = new List<${entity.ClassName}>();
    bool isOk = true;
    Exception ex = null;
    try
    {
        while (currentDataHandler.DataReader.Read())
        {
            array.Add(this.CreateObjectFromDataReader(currentDataHandler.DataReader, true));
        }

        LogManager.GetLogger(this.GetType()).Debug("DataHandler collected " + array.Count + " record(s)");
        currentDataHandler.DataReader.Close();
    }
    catch (Exception e)
    {
        LogManager.GetLogger(this.GetType()).Debug("Error in DataObjectFactory building the array", e);
        isOk = false;
        ex = e;
    }
    finally
    {
        if (closeConnection || !isOk)
        {
            currentDataHandler.CloseConnection();
        }

        if (!isOk)
        {
            throw ex;
        }
    }

    return array;
}

} 
#if(${Neo.Entity.Namespace})
}
#end